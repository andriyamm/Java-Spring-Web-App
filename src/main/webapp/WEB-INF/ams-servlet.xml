<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation= " http://www.springframework.org/schema/aop
	 http://www.springframework.org/schema/aop/spring-aop-2.0.xsd 
	 http://www.springframework.org/schema/tx 
	 http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	 http://www.springframework.org/schema/context 
	 http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/mvc
     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
     
     
	<mvc:annotation-driven />
	
    <!-- the packages to be scanned -->
	<context:component-scan base-package="org.amm.ams.web" />
	
    <!-- {begin} bean for tiles -->
	
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
		p:definitions="/WEB-INF/tiles-defs.xml" />

	<bean id="viewResolverForTiles"
		class="org.springframework.web.servlet.view.ResourceBundleViewResolver"
		p:basename="views" p:order="1" />

	<bean id="viewResolverSimple"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />

		<property name="suffix" value=".jsp" />
		<property name="order" value="2"></property>
	</bean>
	
	<mvc:resources mapping="/resources/**" location="/resources/" /> 

	<!-- {end} beans for tiles -->
	
	<!-- Spring 3, ContentNegotiatingViewResolver, is an interesting view resolver, which allow you
	 to output a same resource (content or data) to different type of views like JSP, XML, RSS, JSON
	  and etc -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	  	<property name="order" value="0" />
	  	<property name="mediaTypes">
			<map>
		   		<entry key="json" value="application/json" />
		  		<entry key="xml" value="application/xml" />
		 		<entry key="rss" value="application/rss+xml" />
			</map>
	  	</property>
	  	<property name="defaultViews">
			<list>
		 		<!-- JSON View -->
		  		<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
 
		   		<!-- RSS View -->
		        <bean class="org.amm.ams.rss.RssFeedView" />
 
		  		<!-- JAXB XML View -->
		  		<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg>
						<bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
						    <property name="classesToBeBound">
								<list>
							   		<value>org.amm.ams.domain.Article</value>
								</list>
						    </property>
						</bean>
					</constructor-arg>
		 		</bean>
			</list>
	  	</property>
	  	<property name="ignoreAcceptHeader" value="true" />
	</bean>

	<!-- {end}  -->

	<!-- {begin} beans for i18n -->

	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			 <property name="paramName" value="lang"></property>
		</bean>
	</mvc:interceptors>
	
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" >
		<property name="defaultLocale" value="en_US"/>
	</bean>
 
	 <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages/messages" />
		<property name="cacheSeconds" value="0" />
		<property name="defaultEncoding" value="UTF-8"/>
	</bean>
	
	<!-- {end} beans for i18n  -->
	
</beans>